#Options Hash Argument
def new_game(name, options = {})
  {
    name: name,
    year:  options[:year],
    system:  options[:system]
  }
end
game = new_game("Street Figher II", :system => "SNES", :year => 1992)


#raise Error
class InvalidGameError < StandardError; end
def new_game(name, options={}) raise InvalidGameError.new unless !name.nil?
{
  name: name,
  year: options[:year],
  system: options[:system]
}
end
begin
  game = new_game(nil)
rescue InvalidGameError => e
  puts "There was a problem creating your new game: #{e.message}"
end


#Splat Arguments
def describe_favorites(*games)
  for game in games
    puts "Favorite Game: #{games.join(' ')}#{game}"
  end  
end
describe_favorites('Mario', 'Contra', 'Metroid')


#Inheritance
#super in initialize
class Base
  attr_accessor :name, :year, :system
  attr_reader :created_at
 
  def initialize(name, options={})
    self.name = name
    self.year = options[:year]
    self.system = options[:system]
    @created_at = Time.now
  end
end
class Derived < Base
  attr_accessor :weight
  def initialize(name, options = {})
    super
    self.weight = options[:weight]
  end
end


#Inheritance
#super in method
class Base
  attr_accessor :name, :year, :system
  attr_reader :created_at
  def initialize(name, options={})
    self.name = name
    self.year = options[:year]
    self.system = options[:system]
    self.created_at = Time.now
  end
 
  def to_s
    self.name
  end
end
class Derived < Base
  def to_s
    string = super
    "#{string} is on : '#{self.system}'"
  end
end


#Array
array = [0, 1, 2, 3, 4, 5, 6]
array.from(4)          #[4, 5, 6]
array.to(2)            #[[0, 1, 2], [3, 4, 5], [6, nil, nil]]
array.in_groups_of(3)  #[[0, 1], [3, 4, 5, 6]] 
array.split(2)         #[[0, 1], [3, 4, 5, 6]]


#yield
##seed.rb
GAMES = [
  Game.new('Contra', year: 1987, system: 'NES'),
  Game.new('Civilization', year: 1991, system: 'PC'),
  Game.new('The Legend of Zelda', year: 1986, system: 'NES'),
  Game.new('Mega Man X2', year: 1995, system: 'SNES'),
  Game.new('Super Metroid', year: 1994, system: 'SNES'),
  Game.new('Sim City 2000', year: 1993, system: 'PC'),
  Game.new('Starcraft', year: 1998, system: 'PC')
]
##example.rb
library = Library.new(GAMES)
library.each_on_system("SNES") { puts "Found a Super Nintendo game" }
##game.rb
class Game
  attr_accessor :name, :year, :system
  attr_reader :created_at
 
  def initialize(name, options={})
    self.name = name
    self.year = options[:year]
    self.system = options[:system]
    @created_at = Time.now
  end
end
##library.rb
class Library
  attr_accessor :games

  def initialize(games = [])
    self.games = games
  end

  def each_on_system(system)
    games.each do |game|      
      yield if game.system == system
    end
  end
end
#Note: 
<<-DOC
def each_on_system(system)
  games.each do |game|      
    yield if game.system == system
  end
end
DOC


#yield
##seed.rb
GAMES = [
  Game.new('Contra', year: 1987, system: 'NES'),
  Game.new('Civilization', year: 1991, system: 'PC'),
  Game.new('The Legend of Zelda', year: 1986, system: 'NES'),
  Game.new('Mega Man X2', year: 1995, system: 'SNES'),
  Game.new('Super Metroid', year: 1994, system: 'SNES'),
  Game.new('Sim City 2000', year: 1993, system: 'PC'),
  Game.new('Starcraft', year: 1998, system: 'PC')
]
##example.rb
library = Library.new(GAMES)
library.each_on_system("SNES") { |game| puts game.name }
##game.rb
class Game
  attr_accessor :name, :year, :system
  attr_reader :created_at
 
  def initialize(name, options={})
    self.name = name
    self.year = options[:year]
    self.system = options[:system]
    @created_at = Time.now
  end
end
##library.rb
class Library
  attr_accessor :games

  def initialize(games = [])
    self.games = games
  end

  def each_on_system(system)
    games.each {|game| yield game if game.system == system}
  end
end
#Note:
<<-DOC
def each_on_system(system)
  games.each {|game| yield game if game.system == system}
end
DOC


#yiled block
##seed.rb
GAMES = [
  Game.new('Contra', year: 1987, system: 'NES'),
  Game.new('Civilization', year: 1991, system: 'PC'),
  Game.new('The Legend of Zelda', year: 1986, system: 'NES'),
  Game.new('Mega Man X2', year: 1995, system: 'SNES'),
  Game.new('Super Metroid', year: 1994, system: 'SNES'),
  Game.new('Sim City 2000', year: 1993, system: 'PC'),
  Game.new('Starcraft', year: 1998, system: 'PC')
]
##example.rb
library = Library.new(GAMES)
library.list { |game| "#{game.name} (#{game.system}) - #{game.year}" }
##game.rb
class Game
  attr_accessor :name, :year, :system
  attr_reader :created_at
 
  def initialize(name, options={})
    self.name = name
    self.year = options[:year]
    self.system = options[:system]
    @created_at = Time.now
  end
end
##library.rb
class Library
  attr_accessor :games

  def initialize(games = [])
    self.games = games
  end

  def list
    games.each do |game|
      puts yield game
    end
  end
end
#Note:
<<-DOC
def list
  games.each do |game|
    puts yield game
  end
end
DOC


##yield block
#include Enumerable
##seed.rb
GAMES = [
  Game.new('Contra', year: 1987, system: 'NES'),
  Game.new('Civilization', year: 1991, system: 'PC'),
  Game.new('The Legend of Zelda', year: 1986, system: 'NES'),
  Game.new('Mega Man X2', year: 1995, system: 'SNES'),
  Game.new('Super Metroid', year: 1994, system: 'SNES'),
  Game.new('Sim City 2000', year: 1993, system: 'PC'),
  Game.new('Starcraft', year: 1998, system: 'PC')
]
##example.rb
library = Library.new(GAMES)
library.select { |game| game.year == 1986 }
library.collect { |game| game.system }
##game.rb
class Game
  attr_accessor :name, :year, :system
  attr_reader :created_at
 
  def initialize(name, options={})
    self.name = name
    self.year = options[:year]
    self.system = options[:system]
    @created_at = Time.now
  end
end
##library.rb
class Library
  attr_accessor :games

  def initialize(games = [])
    self.games = games
  end

  def each
    games.each{|game| yield game}
  end
  include Enumerable
end
#Note:
<<-DOC
def each
  games.each {|game| yield game}
end
include Enumerable
DOC


#yield
##emulator.rb
class Emulator
  def initialize(system)
    # Creates an emulator for the given system
  end
 
  def play(game)
    # Runs the given game in the emulator
  end
 
  def start(game)
    # Loads the given game but doesn't run it
  end
 
  def screenshot
    # Returns a screenshot of the currently loaded game
  end
end
##game.rb
class Game
  attr_accessor :name, :year, :system
  attr_reader :created_at

  def initialize(name, options={})
    self.name = name
    self.year = options[:year]
    self.system = options[:system]
    @created_at = Time.now
  end

  def play
    emulate do |emulator|
      emulator.play(self)
    end
  end

  def screenshot
    emulate do |emulator|
      emulator.start(self)
      emulator.screenshot
    end
  end
  
  private
  def emulate
    begin
      emulator = Emulator.new(system)
      yield emulator
    rescue Exception => e
      puts "Emulator failed: #{e}"
    end
  end
end
#Note:
<<-DOC
def play
  emulate do |emulator|
    emulator.play(self)
  end
end

def screenshot
  emulate do |emulator|
    emulator.start(self)
    emulator.screenshot
  end
end
  
private
def emulate
  begin
    emulator = Emulator.new(system)
    yield emulator
  rescue Exception => e
    puts "Emulator failed: #{e}"
  end
end
DOC


#yield block
<<-DOC
def each_on_system(system)
  games.each do |game|      
    yield if game.system == system
  end
end
DOC

<<-DOC
def each_on_system(system)
  games.each {|game| yield game if game.system == system}
end
DOC

<<-DOC
def list
  games.each do |game|
    puts yield game
  end
end
DOC

<<-DOC
def each
  games.each {|game| yield game}
end
include Enumerable
DOC


<<-DOC
def each
  games.each {|game| yield game}
end
include Enumerable
DOC


<<-DOC
def play
  emulate do |emulator|
    emulator.play(self)
  end
end

def screenshot
  emulate do |emulator|
    emulator.start(self)
    emulator.screenshot
  end
end
  
private
def emulate
  begin
    emulator = Emulator.new(system)
    yield emulator
  rescue Exception => e
    puts "Emulator failed: #{e}"
  end
end
DOC


#Symbol#to_proc
##game.rb
class Game 
  attr_accessor :name

  def initialize(name, options)
    @name = name
    @year = options[:year]
    @system = options[:system]
  end
end
##library.rb
class Library
  attr_accessor :games

  def initialize(games)
    @games = games
  end
  
  <<-DOC
  def names
    games.map { |game| game.name }
  end
  DOC	

  def names
    games.map(&:name)
  end
end
#Note: games.map(&:name)


#block_given?
##game.rb
class Game 
  attr_accessor :name

  def initialize(name, options)
    @name = name
    @year = options[:year]
    @system = options[:system]
  end
end
##library.rb
class Library
  attr_accessor :games

  def initialize(games)
    @games = games
  end

  def list
    if block_given?
      games.each{|game| puts yield game}
  	else
      games.each{|game| puts game.name}
    end
  end
end


#Struct
Note: Game = Struct.new(:name, :year, :system)
<<-DOC
class Game
  attr_accessor :name, :year, :system

  def initialize(name, year, system)
    self.name = name
    self.year = year
    self.system = system
  end
end
DOC

Game = Struct.new(:name, :year, :system)


#alias_method
#Note: alias_method :each_game, :each
class Library
  attr_accessor :games

  def each(&block)
    games.each(&block)
  end
  
  alias_method :each_game, :each
end


#define_method
#Note: define_method status do
<<-DOC
class Tweet
  def draft
    @status = :draft
  end

  def posted
    @status = :posted
  end

  def deleted
    @status = :deleted
  end
end
DOC

class Tweet
  states = [:draft, :posted, :deleted]
  states.each do |status|
    define_method status do
      @status = status
    end
  end
end


#define method
class Game
  SYSTEMS = ['SNES', 'PS1', 'Genesis']
  SYSTEMS.each do |system|
    define_method "runs_on_#{system.downcase}?" do
      self.system = system.downcase
    end
  end 
  attr_accessor :name, :year, :system

  <<-DOC
  def runs_on_snes?
    self.system == 'SNES'
  end

  def runs_on_ps1?
    self.system == 'PS1'
  end

  def runs_on_genesis?
    self.system == 'Genesis'
  end
  DOC
end


#define_method
class Library
  attr_accessor :games
  [:each, :map, :select].each do |method|
    define_method(method) do |&block|
      games.send(method, &block)
    end
  end
  
  <<-DOC
  def each(&block)
    games.each(&block)
  end

  def map(&block)
    games.map(&block)
  end

  def select(&block)
    games.select(&block)
  end
  DOC
end


#send [can call private or proected]
library = Library.new(GAMES)
#library.list
library.send(:list)
#library.emulate("Contra")
library.send(:emulate, "Contra")
#game = library.find("Contra")
game = library.send(:find, "Contra")


#public_send [prevents running private or protected methods]
[Calling private or protected methods by public_send will raise an error, hence the corresponding called method should be private or protected]
library = Library.new(GAMES)
library.public_send(:list)
library.public_send(:emulate, "Contra")
game = library.public_send(:find, "Contra")


#Looking Up Methods
#Refactored code to look up Method objects for the 'list' and 'emulate' methods, and to call them.
library = Library.new(GAMES)
#library.list
list = library.method(:list)
list.call
#library.emulate("Contra")
emulate = library.method(:emulate)
emulate.call("Contra")


#define_method, self.class.class_eval, and send
class Library
  SYSTEMS = ['arcade', 'atari', 'pc']

  attr_accessor :games

  def method_missing(name, *args)
    system = name.to_s
    if SYSTEMS.include?(system)
      self.class.class_eval do
        define_method(system) do
          find_by_system(system)
        end
      end
      send(system)
    else
      super
    end
  end

  private
  def find_by_system(system)
    games.select { |game| game.system == system }
  end
end


#respond_to?
class Library
  SYSTEMS = ['arcade', 'atari', 'pc']

  attr_accessor :games

  def method_missing(name, *args)
    system = name.to_s
    if SYSTEMS.include?(system)
      self.class.class_eval do
        define_method(system) do
          find_by_system(system)
        end
      end
      send(system)
    else
      super
    end
  end
  
  def respond_to?(method)
    SYSTEMS.include?(method.to_s)
  end
    
  private

  def find_by_system(system)
    games.select { |game| game.system == system }
  end
end


#self
class Game
  def self.find_by_title
  end
end


#sef
##game_override.rb
Game.class_eval do
  def self.find_by_owner(name)
  end
end

#self and klass.class_eval #klass is by convention
class LibraryManager
  def self.make_available(klass, user)
    klass.class_eval do
      define_method("lend_to_#{user}") do
      end
    end
  end
end


#instance_eval
contra_game = Game.new('Contra')
contra_game.instance_eval do
  self.owner = 'Alice'
end


#instance_eval(&block) if block_given?
class Game
  def initialize(&block)
    instance_eval(&block) if block_given?
  end

  def owner(name=nil)
    if name
      @owner = name
    else
      @owner
    end
  end
end


#instance_eval
##library.rb
class Library
  def initialize
    @games = []
  end
 
  def add_game(game)
    @games << game
  end
end
##game.rb
class Game
  attr_reader :name

  def initialize(name)
    @name = name
    @year = nil
    @system = nil
  end

  # Add methods to store year and system
  def system(name)
    @system = name
  end
  
  def year(value)
    @year = value
  end 
end
##game_dsl.rb
LIBRARY = Library.new
def add_game(name, &block)
  game = Game.new(name)
  # Capture the block and call it here
  game.instance_eval(&block)
  LIBRARY.add_game(game)
end


#instance_eval
##example.rb
add_game "Civilization" do
  system "PC"
  year 1991
end
with_game "Civilization" do
  # We'll add some code to operate on the game later
end
##game.rb
class Game
  attr_reader :name
 
  def initialize(name)
    @name = name
    @year = nil
    @system = nil
  end
 
  def year(value)
    @year = value
  end
 
  def system(value)
    @system = value
  end
end
##game_dsl.rb
LIBRARY = Library.new

def add_game(name, &block)
  game = Game.new(name)
  game.instance_eval(&block)
  LIBRARY.add_game(game)
end

# Implement the with_game method here
def with_game(name, &block)
  game = LIBRARY.find_by_name(name)
  game.instance_eval(&block)
end


#method_missing
class Library
  def method_missing(name, *args)
    puts name, args
  end
end


#delegate method_missing
class Library
  def initialize(console)
    @manager = console
  end

  def method_missing(name, *args)
    @manager.send(name, *args)
  end
end


#string 
#Note: if name.to_s =~ /atari/
class Library
  def initialize(console)
    @manager = console
  end

  def method_missing(name, *args)
    if name.to_s =~ /atari/
      @manager.send(name, *args)
    elsif
      super
    end
  end
end


#SimpleDelegator
require 'delegate'
class Library < SimpleDelegator
  def initialize(console)   
    @manager = console
    super(console)
  end
  
  <<-DOC
  def method_missing(name, *args)
    @manager.send(name, *args)
  end
  DOC
end


#Optional Parameters
#Note: def add_game(name, system = nil, year = nil, &block)
#Array Parameter using Splat * operator
#Note: def with_game(*names, &block)
##game.rb
class Game
  attr_reader :name
 
  def initialize(name)
    @name = name
    @year = nil
    @system = nil
  end
 
  def year(value)
    @year = value
  end
 
  def system(value)
    @system = value
  end
 
  def print_details
    puts "#{@name} - #{@year} (#{@system})"
  end
 
  def play
  end
 
  def capture_screenshot
  end
end
##library.rb
class Library
  def initialize
    @games = []
  end
 
  def add_game(game)
    @games << game
  end
 
  def find_by_name(name)
    @games.detect { |game| game.name == name }
  end
end
##game_dsl.rb
LIBRARY = Library.new

def add_game(name, system = nil, year = nil, &block)
  game = Game.new(name)
  game.system(system) if system
  game.year(year) if year
  game.instance_eval(&block) if block_given?
  LIBRARY.add_game(game)
end

def with_game(*names, &block)
  names.each do |name|
    game = LIBRARY.find_by_name(name)
    game.instance_eval(&block)
  end
  self
end


#DSL Domain Specific Language
game_dsl.rb
LIBRARY = Library.new
 
def add_game(name, &block)
  game = Game.new(name)
  game.instance_eval(&block)
  LIBRARY.add_game(game)
end
 
def with_game(name, &block)
  game = LIBRARY.find_by_name(name)
  game.instance_eval(&block)
end
##game.rb
class Game
  attr_reader :name
 
  def initialize(name)
    @name = name
    @year = nil
    @system = nil
  end
 
  def year(value)
    @year = value
  end
 
  def system(value)
    @system = value
  end
 
  def print_details
    puts "#{@name} - #{@year} (#{@system})"
  end
 
  def play
  end
 
  def capture_screenshot
  end
end
##library.rb
class Library
  def initialize
    @games = []
  end
 
  def add_game(game)
    @games << game
  end
 
  def find_by_name(name)
    @games.detect { |game| game.name == name }
  end
end
##example.rb
add_game "Civilization" do
  system "PC"
  year 1991
end
add_game "Contra" do
  system "NES"
  year 1987 
end
with_game "Contra" do 
  game = LIBRARY.find_by_name("Contra")
  game.print_details
  game.play
  game.capture_screenshot
end


#DSL Domain Specific Language
#Note: DSL Complete
##library.rb
class Library
  def initialize
    @games = []
  end
 
  def add_game(game)
    @games << game
  end
 
  def find_by_name(name)
    @games.detect { |game| game.name == name }
  end
 
  def find_by_tag(tag)
    @games.select { |game| game.tags.include?(tag) }
  end
end
##game.rb
class Game
  attr_reader :name, :tags
 
  def initialize(name)
    @name = name
    @tags = []
  end
 
  def year(value)
    @year = value
  end
 
  def system(value)
    @system = value
  end
 
  def print_details
    puts "#{@name} - #{@year} (#{@system})"
  end
 
  def capture_screenshot
    puts "Grabbing a screenshot for #{@name}"
  end
 
  def play
    if @system == "SNES"
      raise "No emulator for SNES games"
    else
      puts "Starting #{@name}"
    end
  end
 
  def method_missing(method_name, *args)
    @tags << method_name.to_s
  end
end
##game_dsl.rb
LIBRARY = Library.new 
def add_game(name, system = nil, year = nil, &block)
  game = Game.new(name)
  game.system(system) if system
  game.year(year) if year
  game.instance_eval(&block) if block_given?
  LIBRARY.add_game(game)
end 
def with_game(*names, &block)
  names.each do |name|
    game = LIBRARY.find_by_name(name)
    game.instance_eval(&block)
  end
end 
def with_games_tagged(tag, &block)
  games = LIBRARY.find_by_tag(tag)
  games.each do |game|
    game.instance_eval(&block)
  end
end
##example.rb
add_game("Civilization", "PC", 1991) { strategy turn_based }
add_game("Contra", "NES", 1987) { strategy turn_based }

add_game("The Legend of Zelda", "NES", 1986) { action rpg }
add_game("Mega Man X2", "SNES", 1995) { action }

add_game("Super Metroid", "SNES", 1994) { adventure platformer }
add_game("Sim City 2000", "PC", 1993) { strategy simulation }
add_game("Starcraft", "PC", 1998) { realtime strategy }

with_games_tagged "action" do
  print_details
end

with_game "Contra" do
  capture_screenshot
end

with_game "Sim City 2000" do
  capture_screenshot
end

with_game "Starcraft" do
  play
end